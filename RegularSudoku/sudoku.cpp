#include <iostream>
using namespace std;

/*  
 *  sudoku is defined as follows:
 *  
 *  00 01 02 | 03 04 05 | 06 07 08
 *  09 10 11 | 12 13 14 | 15 16 17
 *  18 19 20 | 21 22 23 | 24 25 26
 *  ------------------------------
 *  27 28 29 | 30 31 32 | 33 34 35
 *  36 37 38 | 39 40 41 | 42 43 44
 *  45 46 47 | 48 49 50 | 51 52 53
 *  ------------------------------
 *  54 55 56 | 57 58 59 | 60 61 62
 *  63 64 65 | 66 67 68 | 69 70 71
 *  72 73 74 | 75 76 77 | 78 79 80
 *  
 */
   
int sudoku[9][9] = {{0, 0, 0, 0, 0, 0, 0, 0, 0},
                    {0, 0, 0, 0, 0, 0, 0, 0, 0}, 
                    {0, 0, 0, 0, 0, 0, 0, 0, 0},
                    {0, 0, 0, 0, 0, 0, 0, 0, 0},
                    {0, 0, 0, 0, 0, 0, 0, 0, 0}, 
                    {0, 0, 0, 0, 0, 0, 0, 0, 0},
                    {0, 0, 0, 0, 0, 0, 0, 0, 0},
                    {0, 0, 0, 0, 0, 0, 0, 0, 0}, 
                    {0, 0, 0, 0, 0, 0, 0, 0, 0}};

int groups[9][9] = {{1, 1, 1, 2, 2, 2, 3, 3, 3},
                    {1, 1, 1, 2, 2, 2, 3, 3, 3}, 
                    {1, 1, 1, 2, 2, 2, 3, 3, 3},
                    {4, 4, 4, 5, 5, 5, 6, 6, 6},
                    {4, 4, 4, 5, 5, 5, 6, 6, 6}, 
                    {4, 4, 4, 5, 5, 5, 6, 6, 6},
                    {7, 7, 7, 8, 8, 8, 9, 9, 9},
                    {7, 7, 7, 8, 8, 8, 9, 9, 9}, 
                    {7, 7, 7, 8, 8, 8, 9, 9, 9}};

int[] checks() {
  
}

int check[81][8] = { //defining check patterns for all tiles
      //1st row
  {1, 2, 9, 10, 11, 18, 19, 20},        //1st square
  {0, 2, 9, 10, 11, 18, 19, 20},
  {0, 1, 9, 10, 11, 18, 19, 20}, 
  {4, 5, 12, 13, 14, 21, 22, 23},       //2nd square
  {3, 5, 12, 13, 14, 21, 22, 23},
  {3, 4, 12, 13, 14, 21, 22, 23},
  {7, 8, 15, 16, 17, 24, 25, 26},       //3rd square
  {6, 8, 15, 16, 17, 24, 25, 26},
  {6, 7, 15, 16, 17, 24, 25, 26}, 
      //2nd row
  {0, 1, 2, 10, 11, 18, 19, 20},        //1st square
  {0, 1, 2, 9, 11, 18, 19, 20},
  {0, 1, 2, 9, 10, 18, 19, 20},
  {3, 4, 5, 13, 14, 21, 22, 23},        //2nd square
  {3, 4, 5, 12, 14, 21, 22, 23},
  {3, 4, 5, 12, 13, 21, 22, 23},
  {6, 7, 8, 16, 17, 24, 25, 26},        //3rd square
  {6, 7, 8, 15, 17, 24, 25, 26}, 
  {6, 7, 8, 15, 16, 24, 25, 26},
      //3rd row   
  {0, 1, 2, 9, 10, 11, 19, 20},         //1st sqaure
  {0, 1, 2, 9, 10, 11, 18, 20},
  {0, 1, 2, 9, 10, 11, 18, 19},
  {3, 4, 5, 12, 13, 14, 22, 23},        //2nd square
  {3, 4, 5, 12, 13, 14, 21, 23},
  {3, 4, 5, 12, 13, 14, 21, 22}, 
  {6, 7, 8, 15, 16, 17, 25, 26},        //3rd square
  {6, 7, 8, 15, 16, 17, 24, 26}, 
  {6, 7, 8, 15, 16, 17, 24, 25}, 
      //4th row
  {28, 29, 36, 37, 38, 45, 46, 47},     //4th square
  {27, 29, 36, 37, 38, 45, 46, 47},
  {27, 28, 36, 37, 38, 45, 46, 47},
  {31, 32, 39, 40, 41, 48, 49, 50},     //5th square
  {30, 32, 39, 40, 41, 48, 49, 50},
  {30, 31, 39, 40, 41, 48, 49, 50},
  {34, 35, 42, 43, 44, 51, 52, 53},     //6th square
  {33, 35, 42, 43, 44, 51, 52, 53},
  {33, 34, 42, 43, 44, 51, 52, 53},
      //5th row
  {27, 28, 29, 37, 38, 45, 46, 47},     //4th square
  {27, 28, 29, 36, 38, 45, 46, 47},
  {27, 28, 29, 36, 37, 45, 46, 47},
  {30, 31, 32, 40, 41, 48, 49, 50},     //5th square
  {30, 31, 32, 39, 41, 48, 49, 50},
  {30, 31, 32, 39, 40, 48, 49, 50},
  {33, 34, 35, 43, 44, 51, 52, 53},     //6th square
  {33, 34, 35, 42, 44, 51, 52, 53},
  {33, 34, 35, 42, 43, 51, 52, 53},
      //6th row
  {27, 28, 29, 36, 37, 38, 46, 47},     //4th square
  {27, 28, 29, 36, 37, 38, 45, 47},
  {27, 28, 29, 36, 37, 38, 45, 46},
  {30, 31, 32, 39, 40, 41, 49, 50},     //5th square
  {30, 31, 32, 39, 40, 41, 48, 50},
  {30, 31, 32, 39, 40, 41, 48, 49},
  {33, 34, 35, 42, 43, 44, 52, 53},     //6th square
  {33, 34, 35, 42, 43, 44, 51, 53},
  {33, 34, 35, 42, 43, 44, 51, 52},
      //7th row
  {55, 56, 63, 64, 65, 72, 73, 74},     //7th square
  {54, 56, 63, 64, 65, 72, 73, 74},
  {54, 55, 63, 64, 65, 72, 73, 74},
  {58, 59, 66, 67, 68, 75, 76, 77},     //8th square
  {57, 59, 66, 67, 68, 75, 76, 77},
  {57, 58, 66, 67, 68, 75, 76, 77},
  {61, 62, 69, 70, 71, 78, 79, 80},     //9th square
  {60, 62, 69, 70, 71, 78, 79, 80},
  {60, 61, 69, 70, 71, 78, 79, 80},
      //8th row
  {54, 55, 56, 64, 65, 72, 73, 74},     //7th square
  {54, 55, 56, 63, 65, 72, 73, 74},
  {54, 55, 56, 63, 64, 72, 73, 74},
  {57, 58, 59, 67, 68, 75, 76, 77},     //8th square
  {57, 58, 59, 66, 68, 75, 76, 77},
  {57, 58, 59, 66, 67, 75, 76, 77},
  {60, 61, 62, 70, 71, 78, 79, 80},     //9th square
  {60, 61, 62, 69, 71, 78, 79, 80},
  {60, 61, 62, 69, 70, 78, 79, 80},
      //9th row
  {54, 55, 56, 63, 64, 65, 73, 74},     //7th square
  {54, 55, 56, 63, 64, 65, 72, 74},
  {54, 55, 56, 63, 64, 65, 72, 73},
  {57, 58, 59, 66, 67, 68, 76, 77},     //8th square
  {57, 58, 59, 66, 67, 68, 75, 77},
  {57, 58, 59, 66, 67, 68, 75, 76},
  {60, 61, 62, 69, 70, 71, 79, 80},     //9th square
  {60, 61, 62, 69, 70, 71, 78, 80},
  {60, 61, 62, 69, 70, 71, 78, 79}
};
int count = 0;

int xy2all(int, int);
int findNextPos();
void solve();
bool checkSolution(int);
void printSudoku();

int main() {
  printSudoku(); 
  solve(); 
  return 0;  
}

int xy2all(int x, int y) {     //x = z%9 ---- y = (z-(z%9)) / 9
  return y*9+x;
}

int findNextPos() {
  int foundx = 9;
  int foundy = 9;
  for(int i = 0; i < 9 && foundy == 9; i++) {
    for(int j = 0; j < 9 && foundx == 9; j++) {
      if(sudoku[i][j] == 0) {
        foundy = i;
        foundx = j;
      }
    }
  }
  return xy2all(foundx, foundy);
}

void solve() {
  int next = findNextPos();
  if(next < 81) {
    int nextx = next % 9;
    int nexty = (next - (next % 9)) / 9;
    
    for(int i = 1; i < 10; i++) {
      sudoku[nexty][nextx] = i;
      if(checkSolution(next)) {
        solve();  
      } 
    }
    sudoku[nexty][nextx] = 0;
  } else {
    count++;
    printSudoku();
  } 
}

bool checkSolution(int pos) {
  bool flag = true;
  int posx = pos % 9;
  int posy = (pos - (pos % 9)) / 9;
  int val = sudoku[posy][posx];
  
  for(int i = 0; i < 9; i++) {
    if(sudoku[posy][i] == val && i != posx) {
      flag = false;
    }    
  }
  for(int i = 0; i < 9; i++) {
    if(sudoku[i][posx] == val && i != posy) {
      flag = false;
    }
  }
  for(int i = 0; i < 8; i++) {
    int checkx = check[pos][i] % 9;
    int checky = (check[pos][i] - (check[pos][i] % 9)) / 9;
    if(sudoku[checky][checkx] == val) {
      flag = false;
    }
  }
  
  return flag;  
}

void printSudoku() {
  for(int i = 0; i < 9; i++) {
    for(int j = 0; j < 9; j++) {
      cout << sudoku[i][j] << " ";
    }
    cout << "\n";
  }
  cout << "\n" << count << " solution(s)" << "\n";
}
                 